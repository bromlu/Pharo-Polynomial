'From Pharo7.0.2 of 15 March 2019 [Build information: Pharo-7.0.2+build.154.sha.9f17218676db0c1a0dd5d1b03226e660dbd674b6 (64 Bit)] on 26 March 2019 at 2:24:05.021215 am'!Object subclass: #Polynomial	instanceVariableNames: 'coefficient'	classVariableNames: ''	poolDictionaries: ''	category: 'COS382'!!Polynomial methodsFor: 'accessing' stamp: 'JonDenning 3/7/2017 17:02'!initialize: initValue	"private: initialize coefficient instance variable"	(initValue isKindOf: (self class))		ifTrue: [ coefficient := (initValue asArray) deepCopy ]		ifFalse: [			(initValue isKindOf: Array)				ifTrue: [ coefficient := initValue deepCopy ]				ifFalse: [ self initialize ]		]! !!Polynomial methodsFor: 'accessing' stamp: 'JonDenning 3/7/2017 17:00'!asArray	"return array representation"	^ coefficient deepCopy! !!Polynomial methodsFor: 'accessing' stamp: 'JonDenning 3/5/2015 17:37'!initialize	super initialize.	coefficient := #( 0 )! !!Polynomial methodsFor: 'accessing' stamp: 'JonDenning 3/7/2017 17:01'!degree	"return degree of polynomial"	^ coefficient size - 1! !!Polynomial methodsFor: 'accessing' stamp: 'JonDenning 3/7/2017 17:01'!coefficient: power	"return coefficient of power term"	(power >= coefficient size) ifTrue: [ ^ 0 ].	^ coefficient at: power + 1! !!Polynomial methodsFor: 'math functions' stamp: 'Bromlu 3/25/2019 09:37'!sum: aPoly	"sums two polynomials"	^ self + aPoly.! !!Polynomial methodsFor: 'building - graph' stamp: 'Bromlu 3/26/2019 02:20'!graphFrom: from graphTo: to	"graph the polynomial between the given numbers"	| diag |	diag := GETDiagramBuilder new.	diag lineDiagram   		height: 200;   		models: (from to: to);   		y: [ :x | self evaluate: x ];   		color: Color black;   		regularAxisAsInteger.	diag open.! !!Polynomial methodsFor: 'public access' stamp: 'Bromlu 3/26/2019 01:59'!evaluate: aNumber	"evaluates the given polynomial to the given number"	| sum |	sum := 0.	0 to: (self degree) do: [ :degree | sum := sum + ((self coefficient: (degree)) * (aNumber ** degree)) ].	^ sum.! !!Polynomial methodsFor: 'public access' stamp: 'Bromlu 3/26/2019 02:03'!evaluate	"evaluates the given polynomial to the given number via prompt"	| sum aNumber manager |	manager := UIManager default   		request: 'What number do you want to evaluate for?'   		initialAnswer: '1'   		title: 'What number do you want to evaluate for?' .	aNumber := manager asNumber .	sum := 0.	0 to: (self degree) do: [ :degree | sum := sum + ((self coefficient: (degree)) * (aNumber ** degree)) ].	^ sum.! !!Polynomial methodsFor: 'comparing' stamp: 'JonDenning 3/7/2017 16:58'!= aPoly    "compares two polynomials"    ^ coefficient = aPoly asArray ! !!Polynomial methodsFor: 'comparing' stamp: 'JonDenning 3/7/2017 16:55'!< aPoly	^ self shouldNotImplement ! !!Polynomial methodsFor: 'comparing' stamp: 'JonDenning 3/7/2017 16:54'!!!= aPoly	^ self ~= aPoly! !!Polynomial methodsFor: 'arithmetic' stamp: 'Bromlu 3/26/2019 02:08'!+ aPoly	"adds two polynomials"	| highestDegree newPoly |	highestDegree := self asArray size max: aPoly asArray size.	newPoly := Array new: highestDegree.	0 to: (highestDegree - 1) do: [ :degree | newPoly at: (degree + 1) put: (aPoly coefficient: degree) + (self coefficient: degree)].	^ self class new initialize: newPoly.  ! !!Polynomial methodsFor: 'arithmetic' stamp: 'Bromlu 3/26/2019 02:14'!differentiate	"returns the derivative of the polynomial"	| newPoly |	newPoly := Array new: (self degree).	1 to: (self degree) do: [ :degree | newPoly at: degree put: ((self coefficient: degree) * degree) ].	^ self class new initialize: newPoly.  ! !